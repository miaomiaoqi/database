<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miaoqi.mybatis.dao.EmployeeMapper">

    <select id="getEmpsByLastNameLikeReturnMap" resultType="com.miaoqi.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tbl_employee where id = #{id}
    </select>

    <!-- 如果返回的是一个集合, 要写集合中元素的类型 -->
    <select id="getEmpsByLastNameLike" resultType="com.miaoqi.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <select id="getEmpByMap" resultType="com.miaoqi.mybatis.bean.Employee">
        select * from ${tableName} where id = #{id } and last_name = #{lastName }
    </select>

    <select id="getEmpByIdAndLastName" resultType="com.miaoqi.mybatis.bean.Employee">
        select * from tbl_employee where id = #{id } and last_name = #{lastName }
    </select>
    <!--
    namespace: 名称空间; 指定接口全类名
    id: 唯一标识
    resultType: 返回值类型
    #{id}: 从传递过来的参数中取出id值
    -->
    <select id="getEmpById" resultType="com.miaoqi.mybatis.bean.Employee" databaseId="mysql">
        select *
        from tbl_employee where id = #{id}
    </select>
    <!-- 
	    public void addEmp(Employee employee);
	
	    public void updateEmp(Employee employee);
	
	    public void deleteEmp(Integer id);
     -->
    <!-- parameterType: 可以省略
       mysql支持自增主键, 自增主键值的获取, mybatis也是利用statement.getGeneratedKeys()
       useGeneratedKeys="true": 使用自增主键获取主键值的策略
       keyProperty: 指定对应的主键属性, 也就是mybatis获取到主键值后, 将这个值封装给javabean的哪个属性
    -->
    <insert id="addEmp" parameterType="com.miaoqi.mybatis.bean.Employee"
            useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name, email, gender)
        values(#{lastName }, #{email }, #{gender })
    </insert>

    <update id="updateEmp">
        update tbl_employee set last_name = #{lastName }, email = #{email }, gender = #{gender }
        where id = #{id }
    </update>
    <resultMap id="" type="" au>
    </resultMap>

    <delete id="deleteEmp">
        delete from tbl_employee where id = #{id }
    </delete>
</mapper>