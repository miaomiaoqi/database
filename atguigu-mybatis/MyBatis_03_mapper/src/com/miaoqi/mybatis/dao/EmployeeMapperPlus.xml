<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miaoqi.mybatis.dao.EmployeeMapperPlus">

    <!-- 自定义某个JavaBean的封装规则 
        type: 自定义规则的Java类型
        id: 唯一id, 方便引用
    -->
    <resultMap type="com.miaoqi.mybatis.bean.Employee" id="MySimpleEmp">
        <!-- 指定主键列的封装规则
            column: 指定哪一列
            property: 指定对应的javabean属性
         -->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName"/>
        <!-- 其他不指定的列会自动封装, 推荐全列映射全部写上 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>

    <!-- resultMap: 自定义结果集映射规则 -->
    <select id="getEmpById" resultMap="MySimpleEmp">
        select * from tbl_employee where id = #{id}
    </select>

    <!-- 
    场景一:
        查询Employee的同时查询员工对应的部门
        Employee==Department
        一个员工有与之对应的部门信息
     -->
    <!--
       联合查询, 使用级联属性封装结果集
     -->
    <resultMap type="com.miaoqi.mybatis.bean.Employee" id="MyDifEmp1">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>

    <!-- 使用association封装级联结果集 -->
    <resultMap type="com.miaoqi.mybatis.bean.Employee" id="MyDifEmp2">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <!-- association可以指定联合的javabean对象 
            property="dept": 指定哪个属性是联合对象
            javaType: 指定这个属性对象的类型[不能省略]
        -->
        <association property="dept" javaType="com.miaoqi.mybatis.bean.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>
    <select id="getEmpAndDept" resultMap="MyDifEmp2">
        SELECT e.id id, e.last_name last_name, e.gender gender, e.dept_id dept_id, d.id did, d.dept_name dept_name
        FROM tbl_employee e, tbl_dept d
        WHERE e.dept_id = d.id
        AND e.id = #{id}
    </select>

    <!-- 使用association进行分步查询
       1. 先按照员工id查询员工信息
       2. 根据查询员工信息中的d_id值去部门表查找部门信息
       3. 部门设置到员工中
    -->
    <resultMap type="com.miaoqi.mybatis.bean.Employee" id="MyEmpByStep">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!-- 使用association定义关联对象 
            select: 表明当前属性是调用select指定的方法查出的结果
            column: 指定将哪一列的值传给这个方法
            
            流程: 使用select指定的方法(传入column指定的参数)查出对象, 封装给property指定的属性
        -->
        <association property="dept" select="com.miaoqi.mybatis.dao.DepartmentMapper.getDeptById"
                     column="dept_id"></association>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpDis">
        select * from tbl_employee where id = #{id}
    </select>

    <!-- 可以使用延迟加载:
       Employee==>dept
           每次查询Emloyee对象的时候, 都将部门信息一起查询出来
           部门信息在我们使用的时候再去查询
           分布查询的基础上加上两个配置
     -->
    <!-- =====================association========================= -->
    <!--
      场景二:
          查询部门的时候将对应的所有员工信息也查询出来, 在DepartmentMapper.xml中
     -->

    <select id="getEmpsByDeptId" resultMap="MySimpleEmp">
        select * from tbl_employee where dept_id = #{deptId }
    </select>
    <!-- <discriminator javaType=""></discriminator>
     鉴别器: mybatis可以使用discriminator判断某列的值, 然后根据某列的值改变封装行为
     封装Employee
         如果查出的是女生, 就把部门信息查出来, 否则不查询
         如果是男生, 把last_name这一列的值赋值给email
    -->
    <resultMap type="com.miaoqi.mybatis.bean.Employee" id="MyEmpDis">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
             column: 指定判定的列名
             javaType: 列值对应的java类型 -->
        <discriminator javaType="java.lang.String" column="gender">
            <!-- 女生 resultType: 指定封装的结果类型, 不能缺少. resultMap二选一 -->
            <case value="0" resultType="com.miaoqi.mybatis.bean.Employee">
                <association property="dept"
                             select="com.miaoqi.mybatis.dao.DepartmentMapper.getDeptById"
                             column="dept_id">
                </association>
            </case>
            <!-- 男生 -->
            <case value="1" resultType="com.miaoqi.mybatis.bean.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="gender" property="gender"/>
                <result column="last_name" property="email"/>
            </case>
        </discriminator>
    </resultMap>
</mapper>