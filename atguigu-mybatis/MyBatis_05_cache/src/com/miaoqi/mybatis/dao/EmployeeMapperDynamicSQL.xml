<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miaoqi.mybatis.dao.EmployeeMapperDynamicSQL">
    <!-- 
        if: 判断
        choose(when, otherwise): 分支选择
        trim: 字符串截取(where(封装查询条件), set(封装修改条件))
        foreach
     -->
    <!-- 查询员工, 要求, 携带了哪个字段查询条件就带上这个字段的值 -->
    <select id="getEmpsByConditionIf" resultType="com.miaoqi.mybatis.bean.Employee">
        select * from tbl_employee
        <where>
            <if test="id != null">
                id = #{id}
            </if>
            <if test="lastName != null and lastName != ''">
                and last_name like #{lastName}
            </if>
            <if test="email != null and email.trim() != ''">
                and email = #{email}
            </if>
            <!-- ognl会进行字符串与数字的转换判断 -->
            <if test="gender == 0 or gender == 1">
                and gender = #{gender}
            </if>
        </where>
        <!-- test: 判断表达式(OGNL) 
            从参数中取值判断
        -->
    </select>

    <select id="getEmpsByConditionTrim" resultType="com.miaoqi.mybatis.bean.Employee">
        select * from tbl_employee
        <!-- 后面多出的and或者or, where标签不能解决 
         prefix="": 前缀, trim标签体中是整个字符串拼串后的结果
                prefix给拼串后的整个字符串加一个前缀
         prefixOverrides="":
                前缀覆盖, 去掉整个字符串前面多余的字符串
         suffix="": 后缀
                suffix给拼串后的整个字符串加一个后缀
         suffixOverrides=""
                后缀覆盖, 去掉整个字符串后面多余的字符串
        -->
        <trim prefix="where" suffixOverrides="and">
            <if test="id != null">
                id = #{id} and
            </if>
            <if test="lastName != null and lastName != ''">
                last_name like #{lastName} and
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email} and
            </if>
            <!-- ognl会进行字符串与数字的转换判断 -->
            <if test="gender == 0 or gender == 1">
                gender = #{gender}
            </if>
        </trim>
        <!-- test: 判断表达式(OGNL) 
            从参数中取值判断
        -->
    </select>

    <select id="getEmpsByConditionChoose" resultType="com.miaoqi.mybatis.bean.Employee">
        select * from tbl_employee
        <where>
            <!-- 如果带了id就用id查询, 如果带了last_name就用last_name查询, 只会进入其中一个 -->
            <choose>
                <when test="id != null">
                    and id = #{id}
                </when>
                <when test="lastName != null">
                    and last_name like #{lastName}
                </when>
                <when test="email != null">
                    and email = #{email}
                </when>
                <otherwise>
                    and gender = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <update id="updateEmp">
        update tbl_employee
        <set>
            <if test="lastName != null">
                last_name = #{lastName },
            </if>
            <if test="email != null">
                email = #{email },
            </if>
            <if test="gender != null">
                gender = #{gender },
            </if>
        </set>
        where id = #{id }
    </update>

    <select id="getEmpsByConditionForeach" resultType="com.miaoqi.mybatis.bean.Employee">
        select * from tbl_employee where id in
        <!-- 
            collection: 指定要遍历的集合
                list类型的参数会特殊处理封装在map中, map的key就叫list
            item: 将当前遍历出的元素赋值给指定的变量
            separator: 每个元素之间的分隔符
            
            #{变量名}就能取出当前变量的值
         -->
        <foreach collection="list" item="itemId" separator="," open="(" close=")" index="">
            #{itemId}
        </foreach>
    </select>

    <!-- 批量保存 -->
    <!-- MYSQL下保存, 可以foreach, mysql支持 values(),(),(); -->
    <!-- <insert id="addEmps">
       INSERT INTO tbl_employee(last_name, email, gender, dept_id)
       VALUES
       <foreach collection="emps" item="emp" separator=",">
           (#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.dept.id})
       </foreach>
    </insert> -->

    <!-- 需要数据库连接属性allowMulitQueries=true -->
    <insert id="addEmps">
        <foreach collection="emps" item="emp">
            INSERT INTO tbl_employee(
            <!-- 引用外部定义的sql -->
            <include refid="insertColumn"></include>
            )
            VALUES (#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.dept.id});
        </foreach>
    </insert>

    <!-- 两个内置参数
        mybatis默认有两个内置参数:
        _parameter: 代表整个参数
            单个参数: _parameter就是这个参数
            多个参数: 参数会被封装成一个map; _parameter就代表这个map
            
        _databaseId: 如果配置了DatabaseIdProvider标签
            _databaseId就是代表当前数据库的别名
     -->

    <!-- 抽取可重用的sql片段, 方便后面引用
       1. sql抽取: 将经常要查询的列名, 或者插入用的列名抽取出来, 方便引用
       2. include引用已经抽取的sql片段
       3. include还可以自定义property, sql标签内就可以使用自定义的属性
           ${prop}
    -->
    <sql id="insertColumn">
        <if test="_databaseId == 'mysql'">
            last_name, email, gender, dept_id
        </if>
    </sql>
</mapper>